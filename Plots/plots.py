# import matplotlib.pyplot as plt
# from sympy.printing.pretty.pretty_symbology import line_width
#
# # """Two Gates"""
# # # q = 4, g = 2, l = [1,2,3,4,5,6,7,8,9,10]
# # fourQ_twoG = [(1, 4, 2, 0.8879927230939715), (2, 4, 2, 0.7149009407554339), (3, 4, 2, 1.118382167660306), (4, 4, 2, 1.4537154108324442), (5, 4, 2, 1.432937049675312), (6, 4, 2, 1.7363925738398756), (7, 4, 2, 2.184481617369816), (8, 4, 2, 2.1005096791101936), (9, 4, 2, 2.519314170603223), (10, 4, 2, 2.8205321708960467)]
# #
# # # q = 8, g = 2, l = [1,2,3,4, 5]
# # eightQ_twoG = [(1, 8, 2, 0.4380778457243751), (2, 8, 2, 0.26729427076705997), (3, 8, 2, 0.32466597511889955), (4, 8, 2, 0.4134197059027252), (5, 8, 2, 0.3455305946654719)]
# #
# # # q = 10, g = 2, l = [1,2,3,4]
# # tenQ_twoG = [(1, 10, 2, 0.40978141209777946), (2, 10, 2, 0.163454521219675), (3, 10, 2, 0.32221696271360833), (4, 10, 2, 0.2017337963842811)]
#
#
# """3 Gates"""
# # q = 1, g = 3, l = [1,5,10, 15, 20, 25, 30, 35, 40]
# oneQ_threeG = [(1, 1, 3, 1.965525726370158), (5, 1, 3, 6.436282116066916), (10, 1, 3, 11.776384364142976), (15, 1, 3, 16.783976234411604), (20, 1, 3, 22.177215728608942), (25, 1, 3, 27.513140120674816), (30, 1, 3, 32.29561382430927), (35, 1, 3, 39.08914586864514), (40, 1, 3, 44.63155788758197)]
#
# # q = 2, g = 3, l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
# twoQ_threeG = [(1, 2, 3, 1.9182122556740817), (2, 2, 3, 2.4071741737372507), (3, 2, 3, 3.5236568840002587), (4, 2, 3, 4.811272362899584), (5, 2, 3, 4.808879133191292), (6, 2, 3, 6.080643970822507), (7, 2, 3, 7.861919779111797), (8, 2, 3, 7.275262304341641), (9, 2, 3, 8.493986456653259), (10, 2, 3, 9.421856492003737), (11, 2, 3, 9.75924005523155), (12, 2, 3, 11.694962176840404), (13, 2, 3, 11.357062829698963), (14, 2, 3, 13.150317977607731), (15, 2, 3, 11.88016958288265), (16, 2, 3, 13.597651814764738), (17, 2, 3, 14.184934646092023), (18, 2, 3, 16.267916204165356), (19, 2, 3, 17.336605361833524), (20, 2, 3, 16.710640450856296)]
#
# # q = 4, g = 3, l = [1,2,3,4,5,6,7,8,9,10]
# fourQ_threeG= [(1, 4, 3, 1.1836489427456423), (2, 4, 3, 1.3624049124275992), (3, 4, 3, 1.7315430795542082), (4, 4, 3, 2.371395867254742), (5, 4, 3, 2.561128199093816), (6, 4, 3, 3.2193956584675707), (7, 4, 3, 2.869838176284573), (8, 4, 3, 3.6540822054632667), (9, 4, 3, 3.9578410371561397), (10, 4, 3, 3.7212311229688693)]
#
# # q = 8, g = 3, l =[1,2,3,4,5]
# eightQ_threeG = [(1, 8, 3, 0.7682947642956021), (2, 8, 3, 0.5068252216608563), (3, 8, 3, 0.6432356774512358), (4, 8, 3, 0.46605237711884384), (5, 8, 3, 0.5931924859826063)]
#
# # q = 10, g = 3, l = [1,2,3,4]
# tenQ_threeG = [(1, 10, 3, 0.6015859484660139), (2, 10, 3, 0.31655758281558377), (3, 10, 3, 0.3018106946248048), (4, 10, 3, 0.262804728536154)]
#
# active = twoQ_threeG
#
# # Extract the number of layers for the x-axis labels
# n_layers_list = [(item[0] * item[1] * item[2]) for item in active]
#
# # Ratio = max_hessian_norm / (n_layers * n_qubits * n_gates)
# tightness_ratios = [item[3]*100 / (item[0] * item[1] * item[2]) for item in active]
#
# # Create the bar chart
# plt.figure(figsize=(10, 6))
# plt.plot(n_layers_list, tightness_ratios, color='blue', linewidth=4)
#
# # Add titles and labels for clarity
# plt.xlabel('Number of Parameters')
# plt.ylabel('Measured Norm / Theoretical Bound')
# plt.title('Bound Tightness vs. Number of Layers for 4-Qubit QNN')
# plt.xticks(n_layers_list) # Ensure all layer numbers are shown as ticks
# plt.grid(axis='y', linestyle='--', alpha=0.7)
# plt.ylim(0, max(tightness_ratios) + 10)
# plt.show()


import matplotlib.pyplot as plt
import numpy as np

# ==================================================================
# 1. DATA
# ==================================================================
# Structure: {n_qubits: [(params_1, L_max), (params_2, L_max), ...]}
# Strucutre [(Norm M, L_max, L_bound), (Norm M2, L_max2, L_bound) ...]

data_with_entanglement = {
    2: [(1, 2, 3, 1.9182122556740817), (2, 2, 3, 2.4071741737372507), (3, 2, 3, 3.5236568840002587), (4, 2, 3, 4.811272362899584), (5, 2, 3, 4.808879133191292), (6, 2, 3, 6.080643970822507), (7, 2, 3, 7.861919779111797), (8, 2, 3, 7.275262304341641), (9, 2, 3, 8.493986456653259), (10, 2, 3, 9.421856492003737), (11, 2, 3, 9.75924005523155), (12, 2, 3, 11.694962176840404), (13, 2, 3, 11.357062829698963), (14, 2, 3, 13.150317977607731), (15, 2, 3, 11.88016958288265), (16, 2, 3, 13.597651814764738), (17, 2, 3, 14.184934646092023), (18, 2, 3, 16.267916204165356), (19, 2, 3, 17.336605361833524), (20, 2, 3, 16.710640450856296)],
    4: [(1, 4, 3, 1.1836489427456423), (2, 4, 3, 1.3624049124275992), (3, 4, 3, 1.7315430795542082),(4, 4, 3, 2.371395867254742), (5, 4, 3, 2.561128199093816), (6, 4, 3, 3.2193956584675707),(7, 4, 3, 2.869838176284573), (8, 4, 3, 3.6540822054632667), (9, 4, 3, 3.9578410371561397),(10, 4, 3, 3.7212311229688693)],
    8: [(1, 8, 3, 0.7682947642956021), (2, 8, 3, 0.5068252216608563), (3, 8, 3, 0.6432356774512358), (4, 8, 3, 0.46605237711884384), (5, 8, 3, 0.5931924859826063)],
    10: [(1, 10, 3, 0.6015859484660139), (2, 10, 3, 0.31655758281558377), (3, 10, 3, 0.3018106946248048), (4, 10, 3, 0.262804728536154)]
}

data_no_entanglement = {
    1: [(1, 1, 3, 1.965525726370158), (5, 1, 3, 6.436282116066916), (10, 1, 3, 11.776384364142976),(15, 1, 3, 16.783976234411604), (20, 1, 3, 22.177215728608942), (25, 1, 3, 27.513140120674816),(30, 1, 3, 32.29561382430927), (35, 1, 3, 39.08914586864514), (40, 1, 3, 44.63155788758197)],
    2: [(1, 2, 3, 0.9902355133415315), (2, 2, 3, 1.4818437030837714), (3, 2, 3, 2.153426077099075),(4, 2, 3, 2.8551045049470862), (5, 2, 3, 3.223809002946435), (6, 2, 3, 3.8730663851775966),(7, 2, 3, 4.5329139332533845), (8, 2, 3, 4.958577680421357), (9, 2, 3, 5.443345644449277),(10, 2, 3, 5.946322380201764), (11, 2, 3, 7.091564604608551), (12, 2, 3, 6.868824899442566),(13, 2, 3, 7.373758022139593), (14, 2, 3, 8.237350838681651), (15, 2, 3, 8.968637669240085),(16, 2, 3, 9.596989818977747), (17, 2, 3, 10.025201102425342), (18, 2, 3, 10.475304985201685),(19, 2, 3, 11.088152551149335), (20, 2, 3, 11.442693900868045)],
    4: [(1, 4, 3, 0.49806386817873116), (2, 4, 3, 0.7444517789590265), (3, 4, 3, 1.1045676552885146),(4, 4, 3, 1.4077797951282935), (5, 4, 3, 1.7289122060684776), (6, 4, 3, 1.9702909790517709),(7, 4, 3, 2.222742359965731), (8, 4, 3, 2.57487787250329), (9, 4, 3, 2.821396209557449),(10, 4, 3, 3.0824107749363328)],
    8: [(1, 8, 3, 0.24913336241455764), (2, 8, 3, 0.3731099860619447), (3, 8, 3, 0.5813920938301481),(4, 8, 3, 0.732694961298253), (5, 8, 3, 0.8534865904199935)],
    10: [(1, 10, 3, 0.19979157602750372), (2, 10, 3, 0.2985465788024339), (3, 10, 3, 0.47265486585354294), (4, 10, 3, 0.5806415854686175)]
}


# NORM SCALING DATA 2L, 2,4,8,10Q, 3G W in [0.1, 5]
data_M_scaling = {
    2: [(1.0198039027185564, 2.809453408072925, 12.237646832622676), (1.6313290801984848, 3.818025887991097, 19.575948962381815), (2.579501339502237, 5.124609239641493, 30.954016074026846), (3.60801576739595, 6.503050008736427, 43.2961892087514), (4.664020413736746, 7.937873946163769, 55.96824496484095), (5.732342722344832, 9.389242209358097, 68.78811266813798), (6.8071857457967, 10.854920093546278, 81.6862289495604), (7.885883621625874, 12.332948126673504, 94.6306034595105), (8.96704529009238, 13.821600487568363, 107.60454348110855), (10.049875621120892, 15.319370398839641, 120.59850745345071)],
    4: [(1.0198, 3.1412, 24.4753), (1.6313, 4.4154, 39.1519), (2.5795, 5.7150, 61.9080), (3.6080, 7.0263, 86.5924), (4.6640, 8.3969, 111.9365), (5.7323, 9.8629, 137.5762), (6.8072, 11.3506, 163.3725), (7.8859, 12.8675, 189.2612), (8.9670, 14.3893, 215.2091), (10.0499, 15.9149, 241.1970)],
    8: [(1.0198039027185564, 2.837724799451568, 48.950587330490706), (1.6313290801984848, 3.8067383397450416, 78.30379584952726), (2.579501339502237, 5.166990862510972, 123.81606429610738), (3.60801576739595, 6.5821347488822015, 173.1847568350056), (4.664020413736746, 8.023954413404837, 223.8729798593638), (5.732342722344832, 9.488314808160979, 275.15245067255194), (6.8071857457967, 10.971713319421015, 326.7449157982416), (7.885883621625874, 12.471127979286742, 378.522413838042), (8.96704529009238, 13.983974359395393, 430.4181739244342), (10.049875621120892, 15.508071523687942, 482.39402981380283)]
}

# ==================================================================
# 2. PLOTTING LOGIC P SCALING
# ==================================================================
def plot_P():
    fig, ax = plt.subplots(figsize=(14, 8))

    colors = {1: 'orange', 2: 'orangered', 4: 'royalblue', 8: 'forestgreen', 10: 'purple'}
    markers = {2: 'o', 4: 's', 8: '^', 10: 'D'}

    # Plot data WITH entanglement (solid lines)
    for n_qubits, data_points in data_with_entanglement.items():
        # CORRECTED: Calculate P (x-axis) as layers * qubits * gates
        params = [p[0] * p[1] * p[2] for p in data_points]
        # CORRECTED: Calculate the ratio % (y-axis) as (norm / P) * 100
        ratios = [(p[3] / (p[0] * p[1] * p[2])) * 100 for p in data_points]
        ax.plot(params, ratios,
                marker=markers.get(n_qubits),
                linestyle='-',
                color=colors.get(n_qubits),
                label=f'n={n_qubits}, With Entanglement')

    # Plot data NO entanglement (dashed lines)
    for n_qubits, data_points in data_no_entanglement.items():
        # CORRECTED: Calculate P (x-axis) as layers * qubits * gates
        params = [p[0] * p[1] * p[2] for p in data_points]
        # CORRECTED: Calculate the ratio % (y-axis) as (norm / P) * 100
        ratios = [(p[3] / (p[0] * p[1] * p[2])) * 100 for p in data_points]
        ax.plot(params, ratios,
                marker=markers.get(n_qubits),
                linestyle='--',
                color=colors.get(n_qubits),
                label=f'n={n_qubits}, No Entanglement')

    # ==================================================================
    # 3. STYLING THE PLOT
    # ==================================================================
    # ax.set_title('Bound Tightness Decreases with Qubit Count', fontsize=16)
    ax.set_xlabel('Number of Parameters (P)', fontsize=12)
    ax.set_ylabel('Measured Norm / Theoretical Bound (%)', fontsize=12)
    ax.grid(True, which='both', linestyle='--', linewidth=0.5)
    ax.legend(title='QNN Architecture', fontsize=10)

    plt.tight_layout()
    plt.show()


def plot_M():
    fig, ax = plt.subplots(figsize=(10, 6))

    # Extract data for element 2
    m_norms_2 = [point[0] for point in data_M_scaling[2]]
    ratios_2 = [point[1] / point[2] for point in data_M_scaling[2]]  # L_max / L_upper

    # Extract data for element 4
    m_norms_4 = [point[0] for point in data_M_scaling[4]]
    ratios_4 = [point[1] / point[2] for point in data_M_scaling[4]]  # L_max / L_upper

    # Extract data for element 4
    m_norms_8 = [point[0] for point in data_M_scaling[8]]
    ratios_8 = [point[1] / point[2] for point in data_M_scaling[8]]  # L_max / L_upper

    ax.plot(m_norms_2, ratios_2, 'o-', color='red', linewidth=2, markersize=6, label='n=2')
    ax.plot(m_norms_4, ratios_4, 'o-', color='blue', linewidth=2, markersize=6, label='n=4')
    ax.plot(m_norms_8, ratios_8, 's-', color='green', linewidth=2, markersize=6, label='n=8')

    ax.set_xlabel('||M|| Norm')
    ax.set_ylabel('L_max / L_upper')
    ax.set_ylim(0, 1)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend()

    plt.tight_layout()
    plt.show()

plot_M()
